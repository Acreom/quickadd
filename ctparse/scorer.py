"""This module contains the Scorer abstraction that can be used to 
implement scoring strategies for ctparse.
"""
import math

from abc import ABCMeta, abstractmethod
from datetime import datetime
from typing import Tuple, Union

from .partial_parse import PartialParse
from .types import Time, Interval


class Scorer(metaclass=ABCMeta):
    """Interface for scoring parses generated by ctparse"""

    @abstractmethod
    def score(self, txt: str, ts: datetime, partial_parse: PartialParse) -> float:
        """Produce a score for a partial production.
        :param txt: the text that is being parsed
        :param ts: the reference time
        :param partial_parse: the partial parse that needs to be scored
        """

    @abstractmethod
    def score_final(self, txt: str, ts: datetime,
                    partial_parse: PartialParse, prod: Union[Time, Interval]) -> float:
        """Produce the final score for a production.
        :param txt: the text that is being parsed
        :param ts: the reference time
        :param partial_parse: the PartialParse object that generated the production
        :param prod: the production
        """


class DummyScorer(Scorer):
    """A scorer that always return a 0.0 score."""

    def score(self, txt: str, ts: datetime, partial_parse: PartialParse) -> float:
        return 0.0

    def score_final(self, txt: str, ts: datetime,
                    partial_parse: PartialParse, prod: Union[Time, Interval]) -> float:
        return 0.0
